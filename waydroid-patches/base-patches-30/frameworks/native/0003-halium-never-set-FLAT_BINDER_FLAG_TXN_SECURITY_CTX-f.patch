From d07c994242c9a55cbb3b80b2cc6893475f67722a Mon Sep 17 00:00:00 2001
From: TheKit <nekit1000@gmail.com>
Date: Sun, 7 Mar 2021 17:15:20 +0200
Subject: [PATCH 03/13] (halium) never set FLAT_BINDER_FLAG_TXN_SECURITY_CTX
 flag

It breaks binder transactions when run on a kernel without
SELinux support.

Change-Id: Ibff0f58a7867061a9353bf8bf5ab092ed562b65f
---
 libs/binder/Parcel.cpp       | 33 ++++++++++++++++++++++++++++++---
 libs/binder/ProcessState.cpp | 15 +++++++++++++--
 2 files changed, 43 insertions(+), 5 deletions(-)

diff --git a/libs/binder/Parcel.cpp b/libs/binder/Parcel.cpp
index 64a4f9bf6d..53a25c4482 100644
--- a/libs/binder/Parcel.cpp
+++ b/libs/binder/Parcel.cpp
@@ -40,6 +40,7 @@
 #include <binder/Status.h>
 #include <binder/TextOutput.h>
 
+
 #include <cutils/ashmem.h>
 #include <utils/Debug.h>
 #include <utils/Flattenable.h>
@@ -51,6 +52,7 @@
 #include <private/binder/binder_module.h>
 #include "Static.h"
 
+
 #define LOG_REFS(...)
 //#define LOG_REFS(...) ALOG(LOG_DEBUG, LOG_TAG, __VA_ARGS__)
 #define LOG_ALLOC(...)
@@ -103,6 +105,7 @@ static void acquire_object(const sp<ProcessState>& proc,
                 reinterpret_cast<IBinder*>(obj.cookie)->incStrong(who);
             }
             return;
+
         case BINDER_TYPE_HANDLE: {
             const sp<IBinder> b = proc->getStrongProxyForHandle(obj.handle);
             if (b != nullptr) {
@@ -111,6 +114,7 @@ static void acquire_object(const sp<ProcessState>& proc,
             }
             return;
         }
+
         case BINDER_TYPE_FD: {
             if ((obj.cookie != 0) && (outAshmemSize != nullptr) && ashmem_valid(obj.handle)) {
                 // If we own an ashmem fd, keep track of how much memory it refers to.
@@ -126,6 +130,7 @@ static void acquire_object(const sp<ProcessState>& proc,
     ALOGD("Invalid object type 0x%08x", obj.hdr.type);
 }
 
+
 static void release_object(const sp<ProcessState>& proc,
     const flat_binder_object& obj, const void* who, size_t* outAshmemSize)
 {
@@ -136,6 +141,7 @@ static void release_object(const sp<ProcessState>& proc,
                 reinterpret_cast<IBinder*>(obj.cookie)->decStrong(who);
             }
             return;
+
         case BINDER_TYPE_HANDLE: {
             const sp<IBinder> b = proc->getStrongProxyForHandle(obj.handle);
             if (b != nullptr) {
@@ -144,6 +150,7 @@ static void release_object(const sp<ProcessState>& proc,
             }
             return;
         }
+
         case BINDER_TYPE_FD: {
             if (obj.cookie != 0) { // owned
                 if ((outAshmemSize != nullptr) && ashmem_valid(obj.handle)) {
@@ -196,6 +203,7 @@ static constexpr inline int schedPolicyMask(int policy, int priority) {
 status_t Parcel::flattenBinder(const sp<IBinder>& binder)
 {
     flat_binder_object obj;
+
     obj.flags = FLAT_BINDER_FLAG_ACCEPTS_FDS;
 
     int schedBits = 0;
@@ -223,9 +231,10 @@ status_t Parcel::flattenBinder(const sp<IBinder>& binder)
                 // override value, since it is set explicitly
                 schedBits = schedPolicyMask(policy, priority);
             }
-            if (local->isRequestingSid()) {
+            // Disabled for Halium
+            /*if (local->isRequestingSid()) {
                 obj.flags |= FLAT_BINDER_FLAG_TXN_SECURITY_CTX;
-            }
+            }*/
             obj.hdr.type = BINDER_TYPE_BINDER;
             obj.binder = reinterpret_cast<uintptr_t>(local->getWeakRefs());
             obj.cookie = reinterpret_cast<uintptr_t>(local);
@@ -238,10 +247,13 @@ status_t Parcel::flattenBinder(const sp<IBinder>& binder)
 
     obj.flags |= schedBits;
 
+
     return finishFlattenBinder(binder, obj);
+
 }
 
 status_t Parcel::unflattenBinder(sp<IBinder>* out) const
+
 {
     const flat_binder_object* flat = readObject(false);
 
@@ -250,12 +262,14 @@ status_t Parcel::unflattenBinder(sp<IBinder>* out) const
             case BINDER_TYPE_BINDER: {
                 sp<IBinder> binder = reinterpret_cast<IBinder*>(flat->cookie);
                 return finishUnflattenBinder(binder, out);
+
             }
             case BINDER_TYPE_HANDLE: {
                 sp<IBinder> binder =
                     ProcessState::self()->getStrongProxyForHandle(flat->handle);
                 return finishUnflattenBinder(binder, out);
             }
+
         }
     }
     return BAD_TYPE;
@@ -618,6 +632,7 @@ bool Parcel::enforceInterface(const char16_t* interface,
     }
 }
 
+
 size_t Parcel::objectsCount() const
 {
     return mObjectsSize;
@@ -773,6 +788,7 @@ status_t Parcel::writeUtf8AsUtf16(const std::unique_ptr<std::string>& str) {
 status_t Parcel::writeByteVectorInternal(const int8_t* data, size_t size) {
     if (size > std::numeric_limits<int32_t>::max()) {
         return BAD_VALUE;
+
     }
 
     status_t status = writeInt32(size);
@@ -781,8 +797,10 @@ status_t Parcel::writeByteVectorInternal(const int8_t* data, size_t size) {
     }
 
     return write(data, size);
+
 }
 
+
 status_t Parcel::writeByteVector(const std::vector<int8_t>& val) {
     return writeByteVectorInternal(val.data(), val.size());
 }
@@ -1074,6 +1092,7 @@ status_t Parcel::readStrongBinderVector(std::vector<sp<IBinder>>* val) const {
     return readTypedVector(val, &Parcel::readStrongBinder);
 }
 
+
 status_t Parcel::writeRawNullableParcelable(const Parcelable* parcelable) {
     if (!parcelable) {
         return writeInt32(0);
@@ -1090,6 +1109,7 @@ status_t Parcel::writeParcelable(const Parcelable& parcelable) {
     return parcelable.writeToParcel(this);
 }
 
+
 status_t Parcel::writeNativeHandle(const native_handle* handle)
 {
     if (!handle || handle->version != sizeof(native_handle))
@@ -1329,6 +1349,7 @@ status_t Parcel::writeNoException()
     return status.writeToParcel(this);
 }
 
+
 status_t Parcel::validateReadData(size_t upperBound) const
 {
     // Don't allow non-object reads on object data
@@ -1485,6 +1506,7 @@ restart_write:
     return err;
 }
 
+
 status_t Parcel::readByteVector(std::vector<int8_t>* val) const {
     size_t size;
     if (status_t status = reserveOutVector(val, &size); status != OK) return status;
@@ -1861,6 +1883,7 @@ String8 Parcel::readString8() const
     return String8();
 }
 
+
 status_t Parcel::readString8(String8* pArg) const
 {
     size_t len;
@@ -1886,7 +1909,9 @@ const char* Parcel::readString8Inplace(size_t* outLen) const
                 return str;
             }
             android_errorWriteLog(0x534e4554, "172655291");
+
         }
+
     }
     *outLen = 0;
     return nullptr;
@@ -1979,6 +2004,7 @@ sp<IBinder> Parcel::readStrongBinder() const
     return val;
 }
 
+
 status_t Parcel::readParcelable(Parcelable* parcelable) const {
     int32_t have_parcelable = 0;
     status_t status = readInt32(&have_parcelable);
@@ -1991,6 +2017,7 @@ status_t Parcel::readParcelable(Parcelable* parcelable) const {
     return parcelable->readFromParcel(this);
 }
 
+
 int32_t Parcel::readExceptionCode() const
 {
     binder::Status status;
@@ -2770,4 +2797,4 @@ void Parcel::Blob::clear() {
     mMutable = false;
 }
 
-} // namespace android
+} // namespace android
\ No newline at end of file
diff --git a/libs/binder/ProcessState.cpp b/libs/binder/ProcessState.cpp
index 4b773e816f..32dcf16133 100644
--- a/libs/binder/ProcessState.cpp
+++ b/libs/binder/ProcessState.cpp
@@ -25,6 +25,7 @@
 #include <cutils/atomic.h>
 #include <utils/Log.h>
 #include <utils/String8.h>
+
 #include <utils/threads.h>
 
 #include <private/binder/binder_module.h>
@@ -108,12 +109,15 @@ sp<ProcessState> ProcessState::selfOrNull()
     return gProcess;
 }
 
+
 sp<IBinder> ProcessState::getContextObject(const sp<IBinder>& /*caller*/)
 {
     sp<IBinder> context = getStrongProxyForHandle(0);
 
+
     if (context == nullptr) {
        ALOGW("Not able to get context object on %s.", mDriverName.c_str());
+
     }
 
     // The root object is special since we get it directly from the driver, it is never
@@ -121,6 +125,7 @@ sp<IBinder> ProcessState::getContextObject(const sp<IBinder>& /*caller*/)
     internal::Stability::tryMarkCompilationUnit(context.get());
 
     return context;
+
 }
 
 void ProcessState::startThreadPool()
@@ -132,14 +137,17 @@ void ProcessState::startThreadPool()
     }
 }
 
+
 bool ProcessState::becomeContextManager(context_check_func checkFunc, void* userData)
 {
+
     AutoMutex _l(mLock);
     mBinderContextCheckFunc = checkFunc;
     mBinderContextUserData = userData;
 
     flat_binder_object obj {
-        .flags = FLAT_BINDER_FLAG_TXN_SECURITY_CTX,
+        // Disabled for Halium
+        /*.flags = FLAT_BINDER_FLAG_TXN_SECURITY_CTX,*/
     };
 
     int result = ioctl(mDriverFD, BINDER_SET_CONTEXT_MGR_EXT, &obj);
@@ -153,6 +161,7 @@ bool ProcessState::becomeContextManager(context_check_func checkFunc, void* user
     }
 
     if (result == -1) {
+
         mBinderContextCheckFunc = nullptr;
         mBinderContextUserData = nullptr;
         ALOGE("Binder ioctl to become context manager failed: %s\n", strerror(errno));
@@ -297,6 +306,7 @@ sp<IBinder> ProcessState::getStrongProxyForHandle(int32_t handle)
     return result;
 }
 
+
 void ProcessState::expungeHandle(int32_t handle, IBinder* binder)
 {
     AutoMutex _l(mLock);
@@ -383,6 +393,7 @@ ProcessState::ProcessState(const char *driver)
     , mExecutingThreadsCount(0)
     , mMaxThreads(DEFAULT_MAX_BINDER_THREADS)
     , mStarvationStartTimeMs(0)
+
     , mBinderContextCheckFunc(nullptr)
     , mBinderContextUserData(nullptr)
     , mThreadPoolStarted(false)
@@ -423,4 +434,4 @@ ProcessState::~ProcessState()
     mDriverFD = -1;
 }
 
-} // namespace android
+} // namespace android
\ No newline at end of file
-- 
2.30.2

