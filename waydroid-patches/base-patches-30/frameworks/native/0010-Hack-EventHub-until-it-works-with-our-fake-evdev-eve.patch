From 139a400179ff9e8e2e56a698bd6c8b220afb87c9 Mon Sep 17 00:00:00 2001
From: Tomeu Vizoso <tomeu.vizoso@collabora.com>
Date: Wed, 24 Oct 2018 08:23:52 +0200
Subject: [PATCH 10/12] Hack EventHub until it works with our fake evdev events

---
 services/inputflinger/reader/EventHub.cpp | 95 +++++++++++++++++++++--
 1 file changed, 88 insertions(+), 7 deletions(-)

diff --git a/services/inputflinger/reader/EventHub.cpp b/services/inputflinger/reader/EventHub.cpp
index a1514af668..27fb9dc0a0 100644
--- a/services/inputflinger/reader/EventHub.cpp
+++ b/services/inputflinger/reader/EventHub.cpp
@@ -28,6 +28,8 @@
 #include <sys/epoll.h>
 #include <sys/inotify.h>
 #include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <sys/types.h>
 #include <sys/limits.h>
 #include <unistd.h>
 
@@ -55,6 +57,7 @@
  * eg. to check for the 12th bit, we do (array[1] & 1<<4)
  */
 #define test_bit(bit, array) ((array)[(bit) / 8] & (1 << ((bit) % 8)))
+#define set_bit(bit, array)    ((array)[(bit)/8] |= (1<<((bit)%8)))
 
 /* this macro computes the number of bytes needed to represent a bit array of the specified size */
 #define sizeof_bit_array(bits) (((bits) + 7) / 8)
@@ -280,6 +283,8 @@ static void ensureProcessCanBlockSuspend() {
 
 const int EventHub::EPOLL_MAX_EVENTS;
 
+#define INPUT_PIPE_NAME "/dev/input/wayland_events"
+
 EventHub::EventHub(void)
       : mBuiltInKeyboardId(NO_BUILT_IN_KEYBOARD),
         mNextDeviceId(1),
@@ -297,6 +302,8 @@ EventHub::EventHub(void)
     mEpollFd = epoll_create1(EPOLL_CLOEXEC);
     LOG_ALWAYS_FATAL_IF(mEpollFd < 0, "Could not create epoll instance: %s", strerror(errno));
 
+    mkfifo(INPUT_PIPE_NAME, 0777);
+
     mINotifyFd = inotify_init();
     mInputWd = inotify_add_watch(mINotifyFd, DEVICE_PATH, IN_DELETE | IN_CREATE);
     LOG_ALWAYS_FATAL_IF(mInputWd < 0, "Could not register INotify for %s: %s", DEVICE_PATH,
@@ -385,6 +392,9 @@ void EventHub::getConfiguration(int32_t deviceId, PropertyMap* outConfiguration)
 
 status_t EventHub::getAbsoluteAxisInfo(int32_t deviceId, int axis,
                                        RawAbsoluteAxisInfo* outAxisInfo) const {
+    char property[PROPERTY_VALUE_MAX];
+    int width = 0;
+    int height = 0;
     outAxisInfo->clear();
 
     if (axis >= 0 && axis <= ABS_MAX) {
@@ -393,11 +403,55 @@ status_t EventHub::getAbsoluteAxisInfo(int32_t deviceId, int axis,
         Device* device = getDeviceLocked(deviceId);
         if (device && device->hasValidFd() && test_bit(axis, device->absBitmask)) {
             struct input_absinfo info;
+#if 0
             if (ioctl(device->fd, EVIOCGABS(axis), &info)) {
                 ALOGW("Error reading absolute controller %d for device %s fd %d, errno=%d", axis,
                       device->identifier.name.c_str(), device->fd, errno);
                 return -errno;
             }
+#endif
+
+            if (property_get("waydroid.display_width", property, nullptr) > 0) {
+                width = atoi(property);
+            }
+
+            if (property_get("waydroid.display_height", property, nullptr) > 0) {
+                height = atoi(property);
+            }
+
+            info.minimum = 0;
+
+            switch(axis) {
+            case ABS_MT_POSITION_X:
+            case ABS_X:
+                info.maximum = width;
+                break;
+            case ABS_MT_POSITION_Y:
+            case ABS_Y:
+                info.maximum = height;
+                break;
+            case ABS_MT_SLOT:
+                info.maximum = 9;
+                break;
+            case ABS_PRESSURE:
+            case ABS_MT_PRESSURE:
+                info.maximum = 255;
+                break;
+            case ABS_MT_TRACKING_ID:
+                info.maximum = 65535;
+                break;
+            case ABS_MT_TOUCH_MAJOR:
+            case ABS_MT_TOUCH_MINOR:
+                info.maximum = 15;
+                break;
+            case ABS_MT_ORIENTATION:
+                info.maximum = 1;
+                break;
+            }
+
+            info.flat = 0;
+            info.fuzz = 0;
+            info.resolution = 1;
 
             if (info.minimum != info.maximum) {
                 outAxisInfo->valid = true;
@@ -1125,7 +1179,7 @@ void EventHub::scanDevicesLocked() {
 }
 
 // ----------------------------------------------------------------------------
-
+#if 0
 static bool containsNonZeroByte(const uint8_t* array, uint32_t startIndex, uint32_t endIndex) {
     const uint8_t* end = array + endIndex;
     array += startIndex;
@@ -1145,7 +1199,7 @@ static const int32_t GAMEPAD_KEYCODES[] = {
         AKEYCODE_BUTTON_THUMBL, AKEYCODE_BUTTON_THUMBR,                       //
         AKEYCODE_BUTTON_START,  AKEYCODE_BUTTON_SELECT, AKEYCODE_BUTTON_MODE, //
 };
-
+#endif
 status_t EventHub::registerFdForEpoll(int fd) {
     // TODO(b/121395353) - consider adding EPOLLRDHUP
     struct epoll_event eventItem = {};
@@ -1216,7 +1270,7 @@ void EventHub::unregisterVideoDeviceFromEpollLocked(const TouchVideoDevice& vide
 }
 
 status_t EventHub::openDeviceLocked(const char* devicePath) {
-    char buffer[80];
+    //char buffer[80];
 
     ALOGV("Opening device: %s", devicePath);
 
@@ -1227,7 +1281,14 @@ status_t EventHub::openDeviceLocked(const char* devicePath) {
     }
 
     InputDeviceIdentifier identifier;
-
+    identifier.name = "wayland";
+    identifier.bus = BUS_VIRTUAL;
+    identifier.product = 1;
+    identifier.vendor = 1;
+    identifier.version = 1;
+    identifier.location = "wayland";
+    identifier.uniqueId = "wayland";
+#if 0
     // Get device name.
     if (ioctl(fd, EVIOCGNAME(sizeof(buffer) - 1), &buffer) < 1) {
         ALOGE("Could not get device name for %s: %s", devicePath, strerror(errno));
@@ -1281,7 +1342,7 @@ status_t EventHub::openDeviceLocked(const char* devicePath) {
         buffer[sizeof(buffer) - 1] = '\0';
         identifier.uniqueId = buffer;
     }
-
+#endif
     // Fill in the descriptor.
     assignDescriptorLocked(identifier);
 
@@ -1299,12 +1360,13 @@ status_t EventHub::openDeviceLocked(const char* devicePath) {
     ALOGV("  location:   \"%s\"\n", identifier.location.c_str());
     ALOGV("  unique id:  \"%s\"\n", identifier.uniqueId.c_str());
     ALOGV("  descriptor: \"%s\"\n", identifier.descriptor.c_str());
-    ALOGV("  driver:     v%d.%d.%d\n", driverVersion >> 16, (driverVersion >> 8) & 0xff,
-          driverVersion & 0xff);
+    //ALOGV("  driver:     v%d.%d.%d\n", driverVersion >> 16, (driverVersion >> 8) & 0xff,
+    //      driverVersion & 0xff);
 
     // Load the configuration file for the device.
     loadConfigurationLocked(device);
 
+#if 0
     // Figure out the kinds of events the device reports.
     ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(device->keyBitmask)), device->keyBitmask);
     ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(device->absBitmask)), device->absBitmask);
@@ -1467,6 +1529,25 @@ status_t EventHub::openDeviceLocked(const char* devicePath) {
         device->controllerNumber = getNextControllerNumberLocked(device);
         setLedForControllerLocked(device);
     }
+#endif
+
+    device->classes |= INPUT_DEVICE_CLASS_TOUCH_MT;
+
+    //device->propBitmask = 0;
+    set_bit(INPUT_PROP_DIRECT, device->propBitmask);
+
+    set_bit(ABS_MT_POSITION_X, device->absBitmask);
+    set_bit(ABS_MT_POSITION_Y, device->absBitmask);
+    set_bit(ABS_MT_TOUCH_MAJOR, device->absBitmask);
+    set_bit(ABS_MT_TOUCH_MINOR, device->absBitmask);
+    set_bit(ABS_MT_ORIENTATION, device->absBitmask);
+    set_bit(ABS_MT_TRACKING_ID, device->absBitmask);
+    set_bit(ABS_MT_PRESSURE, device->absBitmask);
+    set_bit(ABS_MT_SLOT, device->absBitmask);
+
+    set_bit(ABS_X, device->absBitmask);
+    set_bit(ABS_Y, device->absBitmask);
+    set_bit(ABS_PRESSURE, device->absBitmask);
 
     // Find a matching video device by comparing device names
     // This should be done before registerDeviceForEpollLocked, so that both fds are added to epoll
-- 
2.30.2

