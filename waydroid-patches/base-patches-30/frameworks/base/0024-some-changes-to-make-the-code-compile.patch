From 31b7d5384e2d9cbfeb00da1960af1ec84318c5d4 Mon Sep 17 00:00:00 2001
From: Madhushan Nishantha <jlmadushan@gmail.com>
Date: Fri, 5 Nov 2021 11:09:37 +0100
Subject: [PATCH 24/24] some changes to make the code compile

Change-Id: Ic25204b87b20498bad735f07a2d8a476c7131d79

Conflicts:
	core/java/android/app/Activity.java
---
 core/java/android/app/Activity.java                 |  4 ++++
 .../java/com/android/internal/policy/DecorView.java | 13 +++++--------
 .../java/com/android/server/wm/ActivityStack.java   |  7 ++++---
 .../com/android/server/wm/RootWindowContainer.java  |  1 +
 4 files changed, 14 insertions(+), 11 deletions(-)

diff --git a/core/java/android/app/Activity.java b/core/java/android/app/Activity.java
index 80bdebeaf05..cc797553fa1 100644
--- a/core/java/android/app/Activity.java
+++ b/core/java/android/app/Activity.java
@@ -1006,6 +1006,10 @@ public class Activity extends ContextThemeWrapper
             setTaskDescription(mTaskDescription);
         }
         // region @boringdroid
+        @Override
+        public boolean moveTaskToBack(boolean nonRoot) {
+            return moveTaskToBack(nonRoot);
+        }
         // @Override
         public void onBackPressed() {
             Activity.this.onBackPressed();
diff --git a/core/java/com/android/internal/policy/DecorView.java b/core/java/com/android/internal/policy/DecorView.java
index b8f7a69bc32..c262053623a 100644
--- a/core/java/com/android/internal/policy/DecorView.java
+++ b/core/java/com/android/internal/policy/DecorView.java
@@ -392,18 +392,15 @@ public class DecorView extends FrameLayout implements RootViewSurfaceTaker, Wind
             // region @waydroid
             if (keyCode == KeyEvent.KEYCODE_F11 && isDown) {
                 Window.WindowControllerCallback callback = mWindow.getWindowControllerCallback();
-                Activity activity = null;
-                if (callback instanceof Activity) {
-                    activity = (Activity) callback;
-                }
+                
                 final int windowingMode =
                         getResources().getConfiguration().windowConfiguration.getWindowingMode();
                 try {
-                    if (windowingMode == WINDOWING_MODE_FREEFORM && activity != null) {
-                        activity.toggleFreeformWindowingMode();
+                    if (windowingMode == WINDOWING_MODE_FREEFORM && callback != null) {
+                        callback.toggleFreeformWindowingMode();
                         updateDecorCaptionShade();
-                    } else if (windowingMode != WINDOWING_MODE_FREEFORM && activity != null) {
-                        activity.toggleFreeformWindowingMode();
+                    } else if (windowingMode != WINDOWING_MODE_FREEFORM && callback != null) {
+                        callback.toggleFreeformWindowingMode();
                         updateDecorCaptionShade();
                     }
                     return true;
diff --git a/services/core/java/com/android/server/wm/ActivityStack.java b/services/core/java/com/android/server/wm/ActivityStack.java
index be365819a0b..e0f250a0496 100644
--- a/services/core/java/com/android/server/wm/ActivityStack.java
+++ b/services/core/java/com/android/server/wm/ActivityStack.java
@@ -24,6 +24,7 @@ import static android.app.WindowConfiguration.WINDOWING_MODE_FULLSCREEN;
 import static android.app.WindowConfiguration.WINDOWING_MODE_PINNED;
 import static android.app.WindowConfiguration.WINDOWING_MODE_SPLIT_SCREEN_PRIMARY;
 import static android.app.WindowConfiguration.WINDOWING_MODE_UNDEFINED;
+import static android.app.WindowConfiguration.WINDOWING_MODE_FREEFORM;
 import static android.app.WindowConfiguration.activityTypeToString;
 import static android.app.WindowConfiguration.windowingModeToString;
 import static android.content.pm.ActivityInfo.CONFIG_SCREEN_LAYOUT;
@@ -744,7 +745,7 @@ class ActivityStack extends Task {
             // region @boringdroid
             // When stack's windowing mode changed, we will persist this windowing mode for top activity.
             if (topActivity != null) {
-                mWindowManager.savePackageWindowingMode(topActivity.appInfo.packageName, windowingMode);
+                mStackSupervisor.mService.mWindowManager.savePackageWindowingMode(topActivity.info.applicationInfo.packageName, windowingMode);
             }
             // endregion
 
@@ -772,7 +773,7 @@ class ActivityStack extends Task {
             }
 
             if (mTmpRect2.isEmpty() && currentMode == WINDOWING_MODE_FREEFORM) {
-                resize(mTmpRect2, null /* tempTaskBounds */, null /* tempTaskInsetBounds */);
+                resize(mTmpRect2, false /* tempTaskBounds */, true /* tempTaskInsetBounds */);
             }
             if (!Objects.equals(getRequestedOverrideBounds(), mTmpRect2)) {
                 resize(mTmpRect2, false /*preserveWindows*/, true /*deferResume*/);
@@ -2009,7 +2010,7 @@ class ActivityStack extends Task {
         // windowing mode in setWindowingMode will be used to save windowing mode when
         // changing windowing mode dynamically after task created, for example clicking
         // maximize button to move task to fullscreen stack from freefrom stack.
-        mWindowManager.savePackageWindowingMode(r.packageName, getWindowingMode());
+        mStackSupervisor.mService.mWindowManager.savePackageWindowingMode(r.packageName, getWindowingMode());
         // endregion
         final boolean allowMoveToFront = options == null || !options.getAvoidMoveToFront();
         final boolean isOrhasTask = rTask == this || hasChild(rTask);
diff --git a/services/core/java/com/android/server/wm/RootWindowContainer.java b/services/core/java/com/android/server/wm/RootWindowContainer.java
index 24c695a44c9..3bffa00407f 100644
--- a/services/core/java/com/android/server/wm/RootWindowContainer.java
+++ b/services/core/java/com/android/server/wm/RootWindowContainer.java
@@ -28,6 +28,7 @@ import static android.app.WindowConfiguration.WINDOWING_MODE_FULLSCREEN_OR_SPLIT
 import static android.app.WindowConfiguration.WINDOWING_MODE_PINNED;
 import static android.app.WindowConfiguration.WINDOWING_MODE_SPLIT_SCREEN_PRIMARY;
 import static android.app.WindowConfiguration.WINDOWING_MODE_UNDEFINED;
+import static android.app.WindowConfiguration.WINDOWING_MODE_FREEFORM;
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static android.content.pm.ActivityInfo.LAUNCH_SINGLE_INSTANCE;
 import static android.content.pm.ActivityInfo.LAUNCH_SINGLE_TASK;
-- 
2.25.1

