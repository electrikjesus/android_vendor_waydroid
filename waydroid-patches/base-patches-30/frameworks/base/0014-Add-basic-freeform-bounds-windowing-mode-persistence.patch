From 174a8468155601505b8b594d28f6ece4cab68c81 Mon Sep 17 00:00:00 2001
From: utzcoz <utzcoz@outlook.com>
Date: Tue, 28 Jul 2020 23:05:24 +0800
Subject: [PATCH 14/25] Add basic freeform bounds/windowing mode persistence

Signed-off-by: utzcoz <utzcoz@outlook.com>
---
 .../android/internal/policy/PhoneWindow.java  |   4 +
 .../com/android/server/wm/ActivityStack.java  |  14 ++
 .../android/server/wm/ActivityStarter.java    |  13 ++
 .../server/wm/RootWindowContainer.java        |  20 +++
 .../server/wm/WindowManagerService.java       | 126 ++++++++++++++++++
 5 files changed, 177 insertions(+)

diff --git a/core/java/com/android/internal/policy/PhoneWindow.java b/core/java/com/android/internal/policy/PhoneWindow.java
index d90a0225..f3d8aee1 100644
--- a/core/java/com/android/internal/policy/PhoneWindow.java
+++ b/core/java/com/android/internal/policy/PhoneWindow.java
@@ -60,6 +60,7 @@ import android.os.Parcel;
 import android.os.Parcelable;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.os.SystemProperties;
 import android.provider.Settings;
 import android.text.TextUtils;
 import android.transition.Scene;
@@ -372,6 +373,9 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         // an user can force using it through developer options.
         boolean forceResizable = Settings.Global.getInt(context.getContentResolver(),
                 DEVELOPMENT_FORCE_RESIZABLE_ACTIVITIES, 0) != 0;
+        // region @boringdroidd
+        forceResizable |= SystemProperties.getBoolean("persist.sys.systemuiplugin.enabled", false);
+        // endregion
         mSupportsPictureInPicture = forceResizable || context.getPackageManager().hasSystemFeature(
                 PackageManager.FEATURE_PICTURE_IN_PICTURE);
         mActivityConfigCallback = activityConfigCallback;
diff --git a/services/core/java/com/android/server/wm/ActivityStack.java b/services/core/java/com/android/server/wm/ActivityStack.java
index 6d452c39..2899993b 100644
--- a/services/core/java/com/android/server/wm/ActivityStack.java
+++ b/services/core/java/com/android/server/wm/ActivityStack.java
@@ -741,6 +741,12 @@ class ActivityStack extends Task {
             // setWindowingMode triggers an onConfigurationChanged cascade which can result in a
             // different resolved windowing mode (usually when preferredWindowingMode is UNDEFINED).
             windowingMode = getWindowingMode();
+            // region @boringdroid
+            // When stack's windowing mode changed, we will persist this windowing mode for top activity.
+            if (topActivity != null) {
+                mWindowManager.savePackageWindowingMode(topActivity.appInfo.packageName, windowingMode);
+            }
+            // endregion
 
             if (creating) {
                 // Nothing else to do if we don't have a window container yet. E.g. call from ctor.
@@ -1994,6 +2000,14 @@ class ActivityStack extends Task {
     void startActivityLocked(ActivityRecord r, @Nullable ActivityRecord focusedTopActivity,
             boolean newTask, boolean keepCurTransition, ActivityOptions options) {
         Task rTask = r.getTask();
+        // region @boringdroid
+        // When creating task, the topActivity is null when invoking setWindowingMode,
+        // so we should save package windowing mode after task created. And saving
+        // windowing mode in setWindowingMode will be used to save windowing mode when
+        // changing windowing mode dynamically after task created, for example clicking
+        // maximize button to move task to fullscreen stack from freefrom stack.
+        mWindowManager.savePackageWindowingMode(r.packageName, getWindowingMode());
+        // endregion
         final boolean allowMoveToFront = options == null || !options.getAvoidMoveToFront();
         final boolean isOrhasTask = rTask == this || hasChild(rTask);
         // mLaunchTaskBehind tasks get placed at the back of the task stack.
diff --git a/services/core/java/com/android/server/wm/ActivityStarter.java b/services/core/java/com/android/server/wm/ActivityStarter.java
index 54ad4aca..4f07d2ec 100644
--- a/services/core/java/com/android/server/wm/ActivityStarter.java
+++ b/services/core/java/com/android/server/wm/ActivityStarter.java
@@ -1592,6 +1592,19 @@ class ActivityStarter {
         setInitialState(r, options, inTask, doResume, startFlags, sourceRecord, voiceSession,
                 voiceInteractor, restrictedBgActivity);
 
+        // region @boringdroid
+        if (mOptions == null) {
+            mOptions = ActivityOptions.makeBasic();
+        }
+        if (mOptions.getLaunchWindowingMode() == WINDOWING_MODE_UNDEFINED) {
+            mOptions.setLaunchWindowingMode(
+                    WindowManagerService
+                            .getWMSInstance()
+                            .getPackageWindowingMode(mStartActivity.info.packageName)
+            );
+        }
+        // endregion
+
         computeLaunchingTaskFlags();
 
         computeSourceStack();
diff --git a/services/core/java/com/android/server/wm/RootWindowContainer.java b/services/core/java/com/android/server/wm/RootWindowContainer.java
index b1d774af..24c695a4 100644
--- a/services/core/java/com/android/server/wm/RootWindowContainer.java
+++ b/services/core/java/com/android/server/wm/RootWindowContainer.java
@@ -3500,6 +3500,26 @@ class RootWindowContainer extends WindowContainer<DisplayContent>
         }
 
         // Implicitly, this case is MATCH_TASK_IN_STACKS_OR_RECENT_TASKS_AND_RESTORE
+        // region @boringdroid
+        int windowingMode = WINDOWING_MODE_UNDEFINED;
+        if (aOptions == null) {
+            aOptions = ActivityOptions.makeBasic();
+        }
+        Intent intent = task.intent;
+        ComponentName realActivity = task.realActivity;
+        String packageName = null;
+        if (realActivity != null) {
+            packageName = realActivity.getPackageName();
+        }
+        if (packageName == null && intent != null && intent.getComponent() != null) {
+            packageName = intent.getComponent().getPackageName();
+        }
+        windowingMode = packageName == null
+                ? windowingMode : mWindowManager.getPackageWindowingMode(packageName);
+        if (windowingMode == WINDOWING_MODE_FREEFORM) {
+            aOptions.setLaunchWindowingMode(windowingMode);
+        }
+        // endregion
         if (!mStackSupervisor.restoreRecentTaskLocked(task, aOptions, onTop)) {
             if (DEBUG_RECENTS) Slog.w(TAG_RECENTS,
                     "Couldn't restore task id=" + id + " found in recents");
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index 355a5314..2a21d7bd 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -146,6 +146,7 @@ import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.content.SharedPreferences;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManagerInternal;
@@ -170,6 +171,7 @@ import android.os.Binder;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Debug;
+import android.os.Environment;
 import android.os.Handler;
 import android.os.HandlerExecutor;
 import android.os.IBinder;
@@ -192,6 +194,7 @@ import android.os.SystemProperties;
 import android.os.SystemService;
 import android.os.Trace;
 import android.os.UserHandle;
+import android.os.UserManager;
 import android.os.WorkSource;
 import android.provider.DeviceConfig;
 import android.provider.Settings;
@@ -8284,4 +8287,127 @@ public class WindowManagerService extends IWindowManager.Stub
             Binder.restoreCallingIdentity(origId);
         }
     }
+    // region @boringdroid
+    private static final String PACKAGE_WINDOWING_MODE_NAME = "package-windowing-mode";
+    private static final String PACKAGE_WINDOW_BOUNDS_NAME = "package-window-bounds";
+
+    private static boolean isDataSystemDirNotReady(Context context) {
+        UserManager userManager = context.getSystemService(UserManager.class);
+        return !(userManager != null && userManager.isUserUnlockingOrUnlocked(UserHandle.myUserId()));
+    }
+
+    private static File getPackageWindowingModeFile() {
+        return new File(
+                Environment.getDataSystemCeDirectory(UserHandle.myUserId())
+                        + File.separator + PACKAGE_WINDOWING_MODE_NAME
+        );
+    }
+
+    private static File getPackageWindowBoundsName() {
+        return new File(
+                Environment.getDataSystemCeDirectory(UserHandle.myUserId())
+                        + File.separator + PACKAGE_WINDOW_BOUNDS_NAME
+        );
+    }
+
+    /**
+     * @hide
+     */
+    public static WindowManagerService getWMSInstance() {
+        return getInstance();
+    }
+
+    /**
+     * @hide
+     */
+    public void savePackageWindowingMode(String packageName,
+                                         @WindowConfiguration.WindowingMode int windowingMode) {
+
+        if (isDataSystemDirNotReady(mContext)) {
+            Slog.e(TAG, "Calling savePackageWindowingMode with package " + packageName
+                    + ", and mode " + windowingMode + ", before file is ready");
+            return;
+        }
+        SharedPreferences sharedPreferences =
+                mContext.getSharedPreferences(getPackageWindowingModeFile(), Context.MODE_PRIVATE);
+        sharedPreferences.edit().putInt(packageName, windowingMode).apply();
+    }
+
+    /**
+     * @hide
+     */
+    public @WindowConfiguration.WindowingMode int getPackageWindowingMode(String packageName) {
+        if (isDataSystemDirNotReady(mContext)) {
+            Slog.e(TAG, "Calling getPackageWindowingMode with package " + packageName
+                    + ", before file is ready");
+            return WindowConfiguration.WINDOWING_MODE_UNDEFINED;
+        }
+        // We only enable freeform when systemui plugin enabled.
+        if (!SystemProperties.getBoolean("persist.sys.pcmode.enabled", false)) {
+            return WindowConfiguration.WINDOWING_MODE_UNDEFINED;
+        }
+        // If the package is in the multi window black list, it will run in default
+        // windowing mode.
+        if (isInMultiWindowDisallowList(packageName)) {
+            return WindowConfiguration.WINDOWING_MODE_UNDEFINED;
+        }
+        SharedPreferences sharedPreferences =
+                mContext.getSharedPreferences(getPackageWindowingModeFile(), Context.MODE_PRIVATE);
+        // We hope the default windowing mode is freeform.
+        return sharedPreferences.getInt(packageName, WindowConfiguration.WINDOWING_MODE_FREEFORM);
+    }
+
+    /**
+     * @hide
+     */
+    public void savePackageWindowBounds(String packageName, Rect bounds) {
+        if (isDataSystemDirNotReady(mContext)) {
+            Slog.e(TAG, "Calling savePackageWindowBounds with package " + packageName
+                    + ", and bounds " + bounds + ", before file is ready");
+            return;
+        }
+        SharedPreferences sharedPreferences =
+                mContext.getSharedPreferences(getPackageWindowBoundsName(), Context.MODE_PRIVATE);
+        Rect tempBounds = new Rect(bounds);
+        sharedPreferences
+                .edit()
+                .putInt(packageName + "-left", tempBounds.left)
+                .putInt(packageName + "-top", tempBounds.top)
+                .putInt(packageName + "-right", tempBounds.right)
+                .putInt(packageName + "-bottom", tempBounds.bottom)
+                .apply();
+    }
+
+    /**
+     * @hide
+     */
+    public Rect getPackageWindowBounds(String packageName) {
+        if (isDataSystemDirNotReady(mContext)) {
+            Slog.e(TAG, "Calling getPackageWindowBounds with package " + packageName
+                    + ", before file is ready");
+            return new Rect();
+        }
+        SharedPreferences sharedPreferences =
+                mContext.getSharedPreferences(getPackageWindowBoundsName(), Context.MODE_PRIVATE);
+        return new Rect(
+                sharedPreferences.getInt(packageName + "-left", 0),
+                sharedPreferences.getInt(packageName + "-top", 0),
+                sharedPreferences.getInt(packageName + "-right", 0),
+                sharedPreferences.getInt(packageName + "-bottom", 0)
+        );
+    }
+
+    private boolean isInMultiWindowDisallowList(String packageName) {
+        if (packageName == null) {
+            return false;
+        }
+        if (packageName.equals("android")) {
+            return true;
+        }
+        if (packageName.contains("com.android.systemui")) {
+            return true;
+        }
+        return false;
+    }
+    // endregion
 }
-- 
2.30.2

