From 22584fbc270b2fa29dc1795fc16a65a18652b7a4 Mon Sep 17 00:00:00 2001
From: Asriel Dreemurr <asriel.danctnix@gmail.com>
Date: Wed, 11 Nov 2020 08:08:51 +0700
Subject: [PATCH 3/6] (anbox) init: modify mount_all to skip mounts and trigger
 nonencrypted state

Change-Id: Iae8cffa6aeb2d56f35a51f0e9f52fd92402c43e9
---
 init/builtins.cpp | 30 +++++++++++++++++++++++++++++-
 rootdir/init.rc   |  4 ++++
 2 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/init/builtins.cpp b/init/builtins.cpp
index 7893166..550f5dd 100644
--- a/init/builtins.cpp
+++ b/init/builtins.cpp
@@ -59,6 +59,7 @@
 #include <cutils/android_reboot.h>
 #include <fs_mgr.h>
 #include <fscrypt/fscrypt.h>
+
 #include <libgsi/libgsi.h>
 #include <logwrap/logwrap.h>
 #include <private/android_filesystem_config.h>
@@ -377,13 +378,16 @@ static Result<void> make_dir_with_options(const MkdirOptions& options) {
     if (lstat(options.target.c_str(), &mstat) != 0) {
         if (errno != ENOENT) {
             return ErrnoError() << "lstat() failed on " << options.target;
+
         }
         if (!make_dir(options.target, options.mode)) {
             return ErrnoErrorIgnoreEnoent() << "mkdir() failed on " << options.target;
         }
         if (lstat(options.target.c_str(), &mstat) != 0) {
             return ErrnoError() << "lstat() failed on new " << options.target;
+
         }
+
     }
     if (!S_ISDIR(mstat.st_mode)) {
         return Error() << "Not a directory on " << options.target;
@@ -396,12 +400,14 @@ static Result<void> make_dir_with_options(const MkdirOptions& options) {
         }
         // chown may have cleared S_ISUID and S_ISGID, chmod again
         needs_chmod = true;
+
     }
     if (needs_chmod) {
         if (fchmodat(AT_FDCWD, options.target.c_str(), options.mode, AT_SYMLINK_NOFOLLOW) == -1) {
             return ErrnoError() << "fchmodat() failed on " << options.target;
         }
     }
+
     if (fscrypt_is_native()) {
         if (!FscryptSetDirectoryPolicy(ref_basename, options.fscrypt_action, options.target)) {
             return reboot_into_recovery(
@@ -541,6 +547,7 @@ static void import_late(const std::vector<std::string>& rc_paths) {
     if (false) DumpState();
 }
 
+
 /* Queue event based on fs_mgr return code.
  *
  * code: return code of fs_mgr_mount_all
@@ -643,15 +650,21 @@ static Result<void> do_mount_all(const BuiltinArguments& args) {
     auto mount_all = ParseMountAll(args.args);
     if (!mount_all.ok()) return mount_all.error();
 
+
+
+
     const char* prop_post_fix = "default";
     bool queue_event = true;
     if (mount_all->mode == MOUNT_MODE_EARLY) {
+
         prop_post_fix = "early";
         queue_event = false;
     } else if (mount_all->mode == MOUNT_MODE_LATE) {
+
         prop_post_fix = "late";
     }
 
+
     std::string prop_name = "ro.boottime.init.mount_all."s + prop_post_fix;
     android::base::Timer t;
 
@@ -666,6 +679,7 @@ static Result<void> do_mount_all(const BuiltinArguments& args) {
         }
     }
 
+
     auto mount_fstab_result = fs_mgr_mount_all(&fstab, mount_all->mode);
     SetProperty(prop_name, std::to_string(t.duration().count()));
 
@@ -673,6 +687,10 @@ static Result<void> do_mount_all(const BuiltinArguments& args) {
         import_late(mount_all->rc_paths);
     }
 
+    // Anbox: filesystem mount is handled outside container, always non-encrypted
+    mount_fstab_result.code = mount_fstab_result.code;
+    mount_fstab_result.userdata_mounted = true;
+
     if (mount_fstab_result.userdata_mounted) {
         // This call to fs_mgr_mount_all mounted userdata. Keep the result in
         // order for userspace reboot to correctly remount userdata.
@@ -708,6 +726,7 @@ static Result<void> do_umount_all(const BuiltinArguments& args) {
         if (!ReadFstabFromFile(*umount_all, &fstab)) {
             return Error() << "Could not read fstab";
         }
+
     }
 
     if (auto result = fs_mgr_umount_all(&fstab); result != 0) {
@@ -814,6 +833,7 @@ static Result<void> do_symlink(const BuiltinArguments& args) {
         // The symlink builtin is often used to create symlinks for older devices to be backwards
         // compatible with new paths, therefore we skip reporting this error.
         return ErrnoErrorIgnoreEnoent() << "symlink() failed";
+
     }
     return {};
 }
@@ -844,6 +864,7 @@ static Result<void> do_sysclktz(const BuiltinArguments& args) {
     return {};
 }
 
+
 static Result<void> do_verity_update_state(const BuiltinArguments& args) {
     int mode;
     if (!fs_mgr_load_verity_state(&mode)) {
@@ -1023,15 +1044,18 @@ static Result<void> do_restorecon(const BuiltinArguments& args) {
         return restorecon_info.error();
     }
 
+
     const auto& [flag, paths] = *restorecon_info;
 
     int ret = 0;
     for (const auto& path : paths) {
         if (selinux_android_restorecon(path.c_str(), flag) < 0) {
+
             ret = errno;
         }
     }
 
+
     if (ret) return ErrnoErrorIgnoreEnoent() << "selinux_android_restorecon() failed";
     return {};
 }
@@ -1201,10 +1225,12 @@ static Result<void> do_installkey(const BuiltinArguments& args) {
         return ErrnoError() << "Failed to create " << unencrypted_dir;
     }
     return ExecVdcRebootOnFailure("enablefilecrypto");
+
 }
 
 static Result<void> do_init_user0(const BuiltinArguments& args) {
     return ExecVdcRebootOnFailure("init_user0");
+
 }
 
 static Result<void> do_mark_post_data(const BuiltinArguments& args) {
@@ -1247,6 +1273,7 @@ static Result<void> do_update_linker_config(const BuiltinArguments&) {
 static Result<void> parse_apex_configs() {
     glob_t glob_result;
     static constexpr char glob_pattern[] = "/apex/*/etc/*.rc";
+
     const int ret = glob(glob_pattern, GLOB_MARK, nullptr, &glob_result);
     if (ret != 0 && ret != GLOB_NOMATCH) {
         globfree(&glob_result);
@@ -1394,6 +1421,7 @@ const BuiltinFunctionMap& GetBuiltinFunctionMap() {
         {"symlink",                 {2,     2,    {true,   do_symlink}}},
         {"sysclktz",                {1,     1,    {false,  do_sysclktz}}},
         {"trigger",                 {1,     1,    {false,  do_trigger}}},
+
         {"verity_update_state",     {0,     0,    {false,  do_verity_update_state}}},
         {"wait",                    {1,     2,    {true,   do_wait}}},
         {"wait_for_prop",           {2,     2,    {false,  do_wait_for_prop}}},
@@ -1405,4 +1433,4 @@ const BuiltinFunctionMap& GetBuiltinFunctionMap() {
 // Builtin-function-map end
 
 }  // namespace init
-}  // namespace android
+}  // namespace android
\ No newline at end of file
diff --git a/rootdir/init.rc b/rootdir/init.rc
index a9af0b0..25b95dc 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -448,6 +448,10 @@ on late-init
     trigger early-boot
     trigger boot
 
+on fs
+    # Do fake mount_all for Anbox
+    mount_all /dev/null
+
 on early-fs
     # Once metadata has been mounted, we'll need vold to deal with userdata checkpointing
     start vold
-- 
2.30.2

